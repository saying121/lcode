name: Release
on:
  release:
    types:
      - published
      - prereleased
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  BIN_NAME: lcode
  PROJECT_NAME: lcode

jobs:
  build-unix:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Install Dependencies
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          sudo apt update
          sudo apt install -y libdbus-1-dev pkg-config # libsecret-1-dev gnome-keyring

      - name: Install gcc-aarch64-linux-gnu
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt update && sudo apt install -yq gcc-aarch64-linux-gnu

      - name: Build
        run: |
          cargo build -p lcode --release --target ${{ matrix.target }}

      - name: Archive
        shell: bash
        run: |
          zip -r "$BIN_NAME-${{ matrix.target }}".zip "./target/${{ matrix.target }}/release/$BIN_NAME"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BIN_NAME }}-${{ matrix.target }}.zip
          path: ${{ env.BIN_NAME }}-${{ matrix.target }}.zip

  build-windows:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build
        run: |
          cargo build -p lcode --release --locked --target ${{ matrix.target }}

      - name: Archive
        env:
          TARGET_NAME: ${{ env.BIN_NAME }}-${{ matrix.target }}
        run: |
          # New-Item -ItemType Directory -Path ${env:TARGET_NAME}
          # Copy-Item -Path ".\target\${{ matrix.target }}\release\${env:BIN_NAME}.exe" -Destination ${env:TARGET_NAME}
          Compress-Archive -Path ".\target\${{ matrix.target }}\release\${env:BIN_NAME}.exe" -DestinationPath "${env:TARGET_NAME}.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BIN_NAME }}-${{ matrix.target }}.zip
          path: ${{ env.BIN_NAME }}-${{ matrix.target }}.zip

  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [build-unix, build-windows]
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          files: |
            ${{ env.BIN_NAME }}-*.zip
          generate_release_notes: true
