name: Release

permissions:
  contents: write

on:
  # release:
  #   types:
  #     - published
  #     - prereleased
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

env:
  BIN_NAME: lcode
  PROJECT_NAME: lcode

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: cargo
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install Nightly Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
      - name: Install cargo-binstall
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-binstall

      - name: Install cargo-release
        run: cargo binstall cargo-release -y

      - name: Install Dbus
        run: sudo apt update && sudo apt install libdbus-1-dev pkg-config

      - name: Publish crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run:
          cargo release publish --allow-branch HEAD --no-confirm --workspace -x || echo "No crates publish."

  create-release:
    # needs: [publish]
    runs-on: ubuntu-latest
    steps:
      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          generate_release_notes: true

  check-if-bin:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install Nightly Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly

      - name: Install jql
        uses: taiki-e/install-action@v2
        with:
          tool: jql

      - name: Searching for bin
        id: searching
        run: |
          result=$(cargo metadata --format-version=1 --no-deps | jql '"packages"|>"targets"<|[1]|>"kind"' | jql '..' -i);
          echo "targets=$result" >> "$GITHUB_OUTPUT";
          echo kind of targets "$result";

      - name: print if skip upploading binaries to github release
        if: ${{ !contains(steps.searching.outputs.targets, 'bin') }}
        run: echo "This job avoid publishing binaries to github releases for libraries crates"

    outputs:
      is_bin: ${{ contains(steps.searching.outputs.targets, 'bin') }}

  build:
    needs: [create-release, check-if-bin]
    if: ${{ needs.check-if-bin.outputs.is_bin == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
            build-tool: cargo
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            features: cross
            cross: false
            build-tool: cargo
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
            features: cross
            build-tool: cross
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            cross: true
            features: cross
            build-tool: cross

          - os: macos-latest
            target: x86_64-apple-darwin
            cross: false
            build-tool: cargo
          - os: macos-latest
            target: aarch64-apple-darwin
            cross: false
            build-tool: cargo

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false
            build-tool: cargo
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            cross: true
            build-tool: cargo
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            cross: false
            build-tool: cargo

    name: ${{ matrix.target }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dbus
        if: ${{ !matrix.cross && startsWith(matrix.os, 'ubuntu-') }}
        run: sudo apt update && sudo apt install libdbus-1-dev pkg-config

      - name: Install Nightly Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: ${{ matrix.cross }}
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - uses: taiki-e/install-action@v2
        if: ${{ matrix.cross }}
        with:
          tool: cross

      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: ${{ env.BIN_NAME }}
          features: ${{ matrix.features || '' }}
          # build-tool: ${{ matrix.build-tool }}
          target: ${{ matrix.target }}
          # include: attribution
          archive: $bin-$tag-$target
          token: ${{ secrets.GITHUB_TOKEN }}
          # ref: refs/tags/${{ needs.get-version.outputs.tag_version }}
          checksum: sha256

      - name: tar
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: |
          cp ./target/x86_64-unknown-linux-gnu/release/lcode ./lcode
          tar -cvf lcode.tar ./lcode

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu' }}
        with:
          name: lcode.tar
          path: lcode.tar

  completions:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout/@v4

      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Generate completions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_MSG: |
            completions(generated): update completions
        run: |
          tar -xvf lcode.tar
          # git checkout main
          ./lcode --generate=zsh >./completions/_lcode
          ./lcode --generate=bash >./completions/lcode.bash
          ./lcode --generate=fish >./completions/lcode.fish

          git config user.email "actions@github"
          git config user.name "Github Actions"
          git remote set-url origin https://x-access-token:"${GITHUB_TOKEN}"@github.com/"${GITHUB_REPOSITORY}".git
          git add completions/

          git tag
          git log 2

          echo "${GITHUB_REF}"
          # shellcheck disable=SC2015
          git diff --quiet && git diff --staged --quiet || (git commit -m "${COMMIT_MSG}"; git push --verbose)
