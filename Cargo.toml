[workspace.package]
edition      = "2021"
authors      = ["saying121 <saying121@outlook.com>"]
homepage     = "https://github.com/saying121/lcode"
rust-version = "1.80"
repository   = "https://github.com/saying121/lcode"

[workspace]
members  = ["crates/*"]
resolver = "2"
exclude  = [".github", "sample/"]

[profile.release]
opt-level     = 3
lto           = true
strip         = true
codegen-units = 1
panic         = "abort"

[workspace.dependencies]
tokio   = { version = "^1" }
futures = { version = "^0.3", default-features = false }

sea-orm = { version = "^1", default-features = false, features = ["sqlx-sqlite", "runtime-tokio-rustls", "macros"] }

reqwest = { version = "^0.12", default-features = false, features = ["json", "rustls-tls", "brotli", "http2"] }

regex = { version = "^1" }

dirs      = { version = "^5" }
crossterm = { version = "^0.27", default-features = true, features = ["event-stream"] }

tracing            = { version = "^0.1" }
tracing-appender   = { version = "^0.2" }
tracing-subscriber = { version = "^0.3", default-features = true, features = ["env-filter"] }

miette = { version = "^7", default-features = true }

# Serialize
serde      = { version = "^1", default-features = false, features = ["derive"] }
serde_json = { version = "^1", default-features = false }
toml       = { version = "^0.8", default-features = true }

html2text = { version = "^0" }

pretty_assertions = { version = "^1" }
paste             = { version = "^1" }

ratatui = { version = "^0.27" }

colored = { version = "^2" }

key_parse       = { path = "./crates/key_parse", version = "^0.2" }
decrypt-cookies = { version = "^0.6", default-features = false, features = ["reqwest"] }
lcode-config    = { path = "./crates/lcode-config", version = "^0.3" }
leetcode-api    = { path = "./crates/leetcode-api", version = "^0.4", features = ["ratatui"] }

[workspace.lints.rust]
temporary_cstring_as_ptr = "deny"

[workspace.lints.clippy]
perf = { level = "deny", priority = -1 }

### nursery group
nursery = { level = "warn", priority = -1 }
trivial_regex = "allow" # see: <https://github.com/rust-lang/rust-clippy/issues/6690>

### pedantic group
inconsistent_struct_constructor = "warn"
match_on_vec_items = "warn"
match_same_arms = "warn"
single_char_pattern = "warn"
missing_fields_in_debug = "warn"
assigning_clones = "warn"
rc_mutex = "warn"
needless_bitwise_bool = "warn"
needless_continue = "warn"
needless_pass_by_value = "warn"
range_minus_one = "warn"
range_plus_one = "warn"
semicolon_if_nothing_returned = "warn"
verbose_bit_mask = "warn"
unneeded_field_pattern = "warn"
unnested_or_patterns = "warn"
unchecked_duration_subtraction = "warn"
same_functions_in_if_condition = "warn"
same_name_method = "warn"
zero_sized_map_values = "warn"
map_unwrap_or = "warn"
option_as_ref_cloned = "warn"
flat_map_option = "warn"
unnecessary_join = "warn"
unnecessary_safety_comment = "warn"
unnecessary_self_imports = "warn"
unnecessary_wraps = "warn"
cloned_instead_of_copied = "warn"
stable_sort_primitive = "warn"
unused_async = "warn"
unused_self = "warn"
large_futures = "warn"
large_stack_arrays = "warn"
large_digit_groups = "warn"
default_trait_access = "warn"
trivially_copy_pass_by_ref = "warn"
doc_link_with_quotes = "warn"
doc_markdown = "warn"
naive_bytecount = "warn"
expl_impl_clone_on_copy = "warn"
mismatching_type_param_order = "warn"
many_single_char_names = "warn"
no_mangle_with_rust_abi = "warn"
index_refutable_slice = "warn"
macro_use_imports = "warn"
implicit_clone = "warn"
should_panic_without_expect = "warn"
ptr_cast_constness = "warn"
ptr_as_ptr = "warn"
cast_ptr_alignment = "warn"
borrow_as_ptr = "warn"
cast_sign_loss = "warn"
str_split_at_newline = "warn"
string_add_assign = "warn"
manual_string_new = "warn"
inefficient_to_string = "warn"
enum_glob_use = "warn"
explicit_deref_methods = "warn"
redundant_closure_for_method_calls = "warn"
redundant_else = "warn"
manual_c_str_literals = "warn"
explicit_iter_loop = "warn"
explicit_into_iter_loop = "warn"
maybe_infinite_iter = "warn"
from_iter_instead_of_collect = "warn"
iter_not_returning_iterator = "warn"
iter_filter_is_ok = "warn"
iter_filter_is_some = "warn"
iter_without_into_iter = "warn"
into_iter_without_iter = "warn"
filter_map_next = "warn"
manual_is_variant_and = "warn"
manual_assert = "warn"
manual_instant_elapsed = "warn"
manual_let_else = "warn"
manual_ok_or = "warn"
if_not_else = "warn"
bool_to_int_with_if = "warn"

### restriction group
unwrap_used = "warn"
# unwrap_in_result = "warn"
semicolon_outside_block = "warn"
verbose_file_reads = "warn"
try_err = "warn"
allow_attributes = "warn"
allow_attributes_without_reason = "warn"
as_underscore = "warn"
clone_on_ref_ptr = "warn"
create_dir = "warn"
default_union_representation = "warn"
deref_by_slicing = "warn"
disallowed_script_idents = "warn"
empty_drop = "warn"
empty_enum_variants_with_brackets = "warn"
empty_structs_with_brackets = "warn"
rest_pat_in_fully_bound_structs = "warn"
error_impl_error = "warn"
filetype_is_file = "warn"
fn_to_numeric_cast_any = "warn"
if_then_some_else_none = "warn"
impl_trait_in_params = "warn"
lossy_float_literal = "warn"
missing_asserts_for_indexing = "warn"
mixed_read_write_in_expression = "warn"
modulo_arithmetic = "warn"
multiple_unsafe_ops_per_block = "warn"
unnecessary_safety_doc = "warn"
ref_option_ref = "warn"
pub_without_shorthand = "warn"
panic_in_result_fn = "warn"
format_push_string = "warn"
str_to_string = "warn"
string_to_string = "warn"

### cargo group
cargo = { level = "warn", priority = -1 }
multiple_crate_versions = "allow"
